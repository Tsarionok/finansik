// <auto-generated />
using System;
using Finansik.Common;
using Finansik.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Finansik.Storage.Migrations
{
    [DbContext(typeof(FinansikDbContext))]
    partial class FinansikDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "operation_direction", new[] { "income", "expense" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Finansik.Storage.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Finansik.Storage.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Finansik.Storage.PerformedOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<OperationDirection>("Direction")
                        .HasColumnType("operation_direction");

                    b.Property<DateTimeOffset>("PerformedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PeriodCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScheduledOperationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PeriodCategoryId");

                    b.HasIndex("ScheduledOperationId");

                    b.ToTable("PerformedOperations");
                });

            modelBuilder.Entity("Finansik.Storage.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("Finansik.Storage.PeriodCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AmountLimit")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PeriodId");

                    b.ToTable("PeriodCategories");
                });

            modelBuilder.Entity("Finansik.Storage.ScheduledOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<OperationDirection>("Direction")
                        .HasColumnType("operation_direction");

                    b.Property<Guid?>("PeriodCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ScheduledFor")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PeriodCategoryId");

                    b.ToTable("ScheduledOperations");
                });

            modelBuilder.Entity("Finansik.Storage.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("Finansik.Storage.Category", b =>
                {
                    b.HasOne("Finansik.Storage.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Finansik.Storage.PerformedOperation", b =>
                {
                    b.HasOne("Finansik.Storage.PeriodCategory", "PeriodCategory")
                        .WithMany("PerformedOperations")
                        .HasForeignKey("PeriodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finansik.Storage.ScheduledOperation", "ScheduledOperation")
                        .WithMany()
                        .HasForeignKey("ScheduledOperationId");

                    b.Navigation("PeriodCategory");

                    b.Navigation("ScheduledOperation");
                });

            modelBuilder.Entity("Finansik.Storage.Period", b =>
                {
                    b.HasOne("Finansik.Storage.Group", "Group")
                        .WithMany("Periods")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Finansik.Storage.PeriodCategory", b =>
                {
                    b.HasOne("Finansik.Storage.Category", "Category")
                        .WithMany("PeriodCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finansik.Storage.Period", "Period")
                        .WithMany("PeriodCategories")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("Finansik.Storage.ScheduledOperation", b =>
                {
                    b.HasOne("Finansik.Storage.PeriodCategory", "PeriodCategory")
                        .WithMany("ScheduledOperations")
                        .HasForeignKey("PeriodCategoryId");

                    b.Navigation("PeriodCategory");
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("Finansik.Storage.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finansik.Storage.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Finansik.Storage.Category", b =>
                {
                    b.Navigation("PeriodCategories");
                });

            modelBuilder.Entity("Finansik.Storage.Group", b =>
                {
                    b.Navigation("Periods");
                });

            modelBuilder.Entity("Finansik.Storage.Period", b =>
                {
                    b.Navigation("PeriodCategories");
                });

            modelBuilder.Entity("Finansik.Storage.PeriodCategory", b =>
                {
                    b.Navigation("PerformedOperations");

                    b.Navigation("ScheduledOperations");
                });
#pragma warning restore 612, 618
        }
    }
}
